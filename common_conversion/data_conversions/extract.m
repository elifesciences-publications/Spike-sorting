function OK = extract(datadir,combined_datadir,groups,do_groups,blocks,Tb,Ta,SR,IBI);
% Select spikes from 
% This function does not return results, except the OK flag.
% It writes the data in the following files:
% For each block and each group
% A spike (spk) file
% In the combined directory
%   1. A spike time file - one for each of the groups, containing information
%   for all blocks. NOte that since blocks are not contunuous, and the actual time is not that critical, I employ
%   an interblock interval (IBI) in seconds to seperate subsqeuent files.
%   2. A cluster file
%   3. A spike shape file
% The SpikeLength (SpikeLen) - the number of samples in a spike is saved in
% the combined diretory in a mat file of the same name.

% This program assumes the existence of the spikes time files which are
% generated by the detect function

OK = 0;


eval(['load ' combined_datadir 'Nspikes']);
eval(['load ' combined_datadir 'FileDurations' ]);

for group_ind = 1:length(do_groups)
    disp(['Extracting spikes from group ' num2str(do_groups(group_ind))])
    channels = groups(do_groups(group_ind)).chans;
    for channel_ind = 1:length(channels)
        AllSpikes{channel_ind} = [];
    end
    AllTimes  = [];
    LastTime = 0;
    for block_ind = 1:length(blocks)
        disp([' block ' num2str(blocks(block_ind))])
        % Read the spike time indices from rpeviously written files
        spiketime_file_name = [datadir 'Block-' num2str(blocks(block_ind)) filesep 'Block-' num2str(blocks(block_ind)) '.res.' groups(do_groups(group_ind)).name];
        fid = fopen(spiketime_file_name,'rt');
        Times = fscanf(fid,'%f');
        fclose(fid);
        AllTimes = [AllTimes; Times + LastTime]; % Accumulating over all blocks for this group
                
        % Last time and FileDurations (generated in detect) are specified in samples
        LastTime = LastTime + FileDurations(block_ind,group_ind) + (IBI*SR);
                        
        % get spikes
        for channel_ind = 1:length(channels) % loop over channels within a group within a block
            disp(['  channel ' num2str(channel_ind)])
            % Load data file and assign variables
            relfile = [datadir 'Block-' num2str(blocks(block_ind)) filesep 'Block-' num2str(blocks(block_ind)) '_Elec_chan_' num2str(channels(channel_ind)) '.mat'];
            varname = ['Elec_' num2str(channels(channel_ind))];
            eval(['load ' relfile ' ' varname ';' ]);
            eval(['data =' varname ';'])
            
            % if filtering, do it now ...
            
            eval(['clear '  varname ';'])
            if ~isempty(Times)
                [Spikes{channel_ind}] = extract_spikes(data,Times,Tb,Ta,SR);
                SpikeLen = size(Spikes{channel_ind},2);
                AllSpikes{channel_ind} = [AllSpikes{channel_ind}; Spikes{channel_ind}]; % Accumulating for all blocks for this group
            end
        end % of channels within a group

        %  Generate the spike file (used by Klusters, but also subsequently loaded to generate PCs)      
        spike_file_name = [datadir 'Block-' num2str(blocks(block_ind)) filesep 'Block-' num2str(blocks(block_ind)) '.spk.' groups(do_groups(group_ind)).name];
        fid = fopen(spike_file_name,'wb');
        Nchans = length(channels);
        SpikeLen = length(Spikes{1}(1,:));
        tD = zeros(Nchans,SpikeLen);
        for i = 1:length(Times)
            for j = 1:length(channels)
                tD(j,:) = Spikes{j}(i,:);
            end
            rSpike = reshape(tD,1,prod(size(tD)));
            fwrite(fid,rSpike,'integer*2');
        end
        fclose(fid);    
    end % over blocks
    
    % Write the combined kluster spike shape file for    
    spike_file_name = [combined_datadir 'combined' groups(do_groups(group_ind)).name '.spk.1'];
    fid = fopen(spike_file_name,'wb');          
    for i = 1:length(AllTimes)
        %tD = [];
        for j = 1:length(channels)
            %tD = [tD; AllSpikes{j}(i,:)];
            tD(j,:) = AllSpikes{j}(i,:);
        end           
        rSpike = reshape(tD,1,prod(size(tD)));
        fwrite(fid,rSpike,'integer*2');
    end
    fclose(fid);

   
    % Creating fake combined cluster file - for Klusters - I name it
    % fake_clu because I am not sure if it ever gets really used
    cluster_file_name = [combined_datadir 'combined' groups(do_groups(group_ind)).name '.fake_clu.1'];
    fid = fopen(cluster_file_name,'w');
    fprintf(fid,'%2.0f \n',1);
    for i = 1:length(AllTimes)
        fprintf(fid,'%2.0f \n',1);
    end
    fclose(fid);
    
    % Create combined spike time file
    spiketime_file_name = [combined_datadir 'combined'  groups(do_groups(group_ind)).name '.res.1'];
    fid = fopen(spiketime_file_name,'w');
    for i = 1:length(AllTimes)
        fprintf(fid,'%2.0f \n',AllTimes(i));
    end
    fclose(fid);
    pack
end % over groups
eval(['save ' combined_datadir 'SpikeLen SpikeLen']);

OK = 1;
return