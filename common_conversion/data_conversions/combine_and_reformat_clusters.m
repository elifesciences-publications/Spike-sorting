function combine_and_reformat_clusters(combined_datadir,datadir,groups,do_groups,blocks,IBI,SR,datestr,site)
% Split cluster files, after they have been generated by Klustakwik and
% then refined by Klusters into individual files for use by Neuroscope. 


% Nspikes is generated by the detect script
%eval(['load ' combined_datadir 'Nspikes']);
%eval(['load ' combined_datadir 'FileDurations' ]);


%FileStartOffsets = [0 ; cumsum(FileDurations(1:end-1,1)) + IBI * SR*([1:length(blocks)-1]')];



% output file to store spike time information variables
outfile = [combined_datadir  'AllSpikes_' datestr '_' num2str(site)   '.mat'];

% Initialize spike class and time variables
for block_ind = 1:length(blocks)
    SpikeClass{blocks(block_ind)} = [];
    SpikeTimes{blocks(block_ind)} = [];
end


% Collect all spike times and classes
for group_ind = 1:length(do_groups)

    
    eval(['load ' combined_datadir  'group' groups(do_groups(group_ind)).name filesep 'FileDurations' groups(do_groups(group_ind)).name ]);
    eval(['load ' combined_datadir  'group' groups(do_groups(group_ind)).name filesep 'Nspikes' groups(do_groups(group_ind)).name ]);

    
    FileStartOffsets = [0 ; cumsum(FileDurations(1:end-1,1)) + IBI * SR*([1:length(blocks)-1]')];
    
    % Load cluster and spike time - these files are generated by the 
    comb_cluster_file_name = [combined_datadir  'group' groups(do_groups(group_ind)).name filesep 'combined' groups(do_groups(group_ind)).name  '.clu.1'];
    % For debugging, this file is created by the extract_perchan script
    comb_times_file_name   = [combined_datadir  'group' groups(do_groups(group_ind)).name filesep 'combined' groups(do_groups(group_ind)).name  '.res.1'];

    % Read Clusters for this group
    fid = fopen(comb_cluster_file_name);
    comb_clusters = fscanf(fid,'%f');
    fclose(fid);
    if ~(sum(Nspikes(1,:)) + 1 == length(comb_clusters))
%    if ~(sum(Nspikes(do_groups(group_ind),:)) + 1 == length(comb_clusters))
        disp('error in number of spikes')
    end
    % Get rid of the initial number of clusters indicator
    comb_clusters = comb_clusters(2:end);

    % Read times for this group - this is for debugging
    fid = fopen(comb_times_file_name);
    comb_times = fscanf(fid,'%f');
    fclose(fid);
    %if ~(sum(Nspikes(do_groups(group_ind),:)) == length(comb_times))
    if ~(sum(Nspikes(1,:)) == length(comb_times))
        disp('error in number of spikes')
    end

    for block_ind = 1:length(blocks)

        % get indices for segments that correspond to individual blocks
        blocks_starts = [1 cumsum(Nspikes(1,1:end-1))+1];
        blocks_ends = [cumsum(Nspikes(1,:))];

        
        %blocks_starts = [1 cumsum(Nspikes(do_groups(group_ind),1:end-1))+1];
        %blocks_ends = [cumsum(Nspikes(do_groups(group_ind),:))];
        seg_inds = [blocks_starts' blocks_ends'];

        % Spike times - these are the spike times generated by the detect
        % script, for each block separately
        spiketime_file_name = [datadir 'Block-' num2str(blocks(block_ind)) filesep 'Block-' num2str(blocks(block_ind)) '_group' num2str(do_groups(group_ind)) '.res.1'];
        fid = fopen(spiketime_file_name,'rt');
        TheseTimes   = fscanf(fid,'%f');
        fclose(fid);

        % These are the classes for the corresponding data segments within
        % the combined cluster file
        TheseClasses                  = comb_clusters([seg_inds(block_ind,1):seg_inds(block_ind,2)]);
        NewUnique = unique(TheseClasses);
        OldUnique = unique(SpikeClass{blocks(block_ind)})     ;                 
        % Check that the only common classes are artifacts. The other
        % classes should have names that reflect the group and therefore
        % distinct. The artifacts are class 0 and therefore there should be
        % an overlap of this classes
        CommonClasses = intersect(NewUnique,OldUnique);
        % Report if there is any commong class different from zero
        if sum(CommonClasses)
            disp(['In block ' num2str(block_ind) ' found the following overlapping classes :' num2str(CommonClasses)])
        end
        % TheseTime2 are taken from the combined time files - I also read
        % these (in addition to the TheseTime which are derived from the original spike time files) 
        % as a measure of error checking
        TheseTimes2 = comb_times([seg_inds(block_ind,1):seg_inds(block_ind,2)]);
                
        % The diff operation is required because the times from the
        % combined file are offset by the time of the previous files =
        % their IBIs.
        
        TheseTimes2 = TheseTimes2 - FileStartOffsets(block_ind);
        
        % This is here for historic reasons, 
        DT1 = TheseTimes;
        DT2 = TheseTimes2;
        
        
        if ~(length(DT1) == length(DT2))
            disp(['Errors with length of time files in group ' groups(do_groups(group_ind)).name ' block: ' num2str(blocks(block_ind))]);
        elseif sum(abs(DT1-DT2))
            disp(['Errors with values of time files in group ' groups(do_groups(group_ind)).name ' block: ' num2str(blocks(block_ind))]);
        end
        SpikeClass{blocks(block_ind)} = [SpikeClass{blocks(block_ind)} ; TheseClasses];
        SpikeTimes{blocks(block_ind)} = [SpikeTimes{blocks(block_ind)} ; TheseTimes2];      
    end       
end

save(outfile,'SpikeTimes','SpikeClass')

return
