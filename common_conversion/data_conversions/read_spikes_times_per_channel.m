function [all_spiketime all_spikeclass channel_list] = read_spikes_times_per_channel(combined_datadir);
% Reads spike times from mat files containing detection for each channel -
% generated by the detect function.
% These are already provided in seconds. 
% We use it for quick screening, so the idea here is to load data from all
% blocks and all channels.
% I reutrn the data in a format that is made to replicate that produced by
% read_spikes_times





% these are the channel time based spike times
D = load([combined_datadir 'per_channel_detections']);

% Find the list of all blocks and channels
% a name might be:    spiketimes_b5_c9
var_names = fieldnames(D);
for i = 1:length(var_names)
    us = findstr('_',var_names{i});
    blocks(i)   = str2num(var_names{i}(us(1)+2:us(2)-1));
    channels(i) = str2num(var_names{i}(us(2)+2:end));
end
block_list = unique(blocks);
channel_list = unique(channels);

% Run over all blocks
for bi = 1:length(block_list)
    spiketime =   [];
    spikeclass =  [];
    % Run over all channels
    for ci = 1:length(channel_list)
        this_one = find([blocks == block_list(bi) & channels == channel_list(ci)]);
        this_name = var_names{this_one};
        this_spiketime = getfield(D,this_name);
        this_class = channel_list(ci) * ones(size(this_spiketime));
        spiketime  = [spiketime  this_spiketime];
        spikeclass = [spikeclass  this_class];
    end
    % sort them
    [all_spiketime{bi} I ] = sort(spiketime');
    all_spikeclass{bi}     = spikeclass(I)';
end

return